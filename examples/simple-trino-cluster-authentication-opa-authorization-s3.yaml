# helm install commons-operator \
#     commons-operator \
#     --repo https://repo.stackable.tech/repository/helm-stable
# helm install secret-operator \
#     secret-operator \
#     --repo https://repo.stackable.tech/repository/helm-stable
# helm install hive-operator \
#     hive-operator \
#     --repo https://repo.stackable.tech/repository/helm-stable
# helm install opa-operator \
#     opa-operator \
#     --repo https://repo.stackable.tech/repository/helm-stable
# helm install minio \
#     --version 4.0.2 \
#     --namespace default \
#     --set mode=standalone \
#     --set replicas=1 \
#     --set persistence.enabled=false \
#     --set buckets[0].name=trino,buckets[0].policy=none \
#     --set users[0].accessKey=trino,users[0].secretKey=trinotrino,users[0].policy=readwrite \
#     --set resources.requests.memory=1Gi \
#     --set service.type=NodePort,service.nodePort=null \
#     --set consoleService.type=NodePort,consoleService.nodePort=null \
#     --set tls.enabled=true,tls.certSecret=minio-tls-certificates,tls.publicCrt=tls.crt,tls.privateKey=tls.key \
#     --repo https://charts.min.io/ minio
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: minio-tls-certificates
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-tls-certificates
  labels:
    secrets.stackable.tech/class: minio-tls-certificates
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQyVENDQXNHZ0F3SUJBZ0lVQkl4WEVMKzd6RXVXVWNPMHI0blB2WUZpNnhBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2V6RUxNQWtHQTFVRUJoTUNSRVV4R3pBWkJnTlZCQWdNRWxOamFHeGxjM2RwWnkxSWIyeHpkR1ZwYmpFTwpNQXdHQTFVRUJ3d0ZWMlZrWld3eEtEQW1CZ05WQkFvTUgxTjBZV05yWVdKc1pTQlRhV2R1YVc1bklFRjFkR2h2CmNtbDBlU0JKYm1NeEZUQVRCZ05WQkFNTURITjBZV05yWVdKc1pTNWtaVEFnRncweU1qQTJNamd4TkRJMU5ESmEKR0E4eU1USXlNRFl3TkRFME1qVTBNbG93ZXpFTE1Ba0dBMVVFQmhNQ1JFVXhHekFaQmdOVkJBZ01FbE5qYUd4bApjM2RwWnkxSWIyeHpkR1ZwYmpFT01Bd0dBMVVFQnd3RlYyVmtaV3d4S0RBbUJnTlZCQW9NSDFOMFlXTnJZV0pzClpTQlRhV2R1YVc1bklFRjFkR2h2Y21sMGVTQkpibU14RlRBVEJnTlZCQU1NREhOMFlXTnJZV0pzWlM1a1pUQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMT0JuRFhHaE10OFFWOVRac0FyVlZ0UAp3cDlNeE0wREZ0VUlGYzdzYkw3V2Nwa0lXa2pEWjc4TDYrZkNVbnBqZUluYUZlZkdzVE1CdDY2ZGFQZFovZ3JJCjM3aFJudy9GZDA2Q2NSb3FST01pdlFFWXo1eHVRdGFsQVZkcXRlTVZQUjZwUzFnMTlKMHMwOVpEM0x1SnJJQ2UKc1c0TXpzeUdhb3ovektTcDYrOEpESktDQjNxWElBRldRT0NhM29PbW9TZTg2VHRONE1TdXhXdktxT21VZUE2NQp2d2o4REpyWXEzc3cxMjkxT3RDSFcrSG95aWFpMnBwMG9mYVNhakExZ3NBU2Erd3JYd3FVOGN5QU9LazBONVhzCmx5ZXdkd0hCQ0FrYTg3RkRDUk1VSTlGZ2pzRGsva3pZL0h3L1BLTXVHRlB0NGhwSXZYMHpFK2FUdVBoeU9yRUMKQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRk5EVGNRWU9DOFVMYUs1R1dWZXFKbGxja1RjOE1COEdBMVVkSXdRWQpNQmFBRk5EVGNRWU9DOFVMYUs1R1dWZXFKbGxja1RjOE1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSEx6eUFRS3JiREJRTlhYMnNtV2xxWC8ySkFXTTB4U0NVR2hsZ0NRSVRqZHJ6Y3YKcTlnMGgvVTZSb0VFSnBwYUZpNWY0UmVvcU50TWErZU12bXErTnQ4WHQ3YzErZ0owZlFuMDh2b2s4YnVxaUZ0SQpCU0Rwd1ZzNjVEOThETVRoUVhrc0dUb1NjT0loRkpVOHZwVXR0NzlDbWJ1a0d5dy91YzQ5ckJxZWpiNHhIVFBpCnNyV1BKSVFrZnBQbUZBUGtqWFdzYVg3cnZYc0dBQk9kZnAvcU1NM2UyWDRhTzVvd2U4QWlocW1LRTNYdmhtZUMKdjA0NStuSW9GTHo0bWZHSGl1YVdLNFJwd3U5SEwzakhEZEU0UXluMVpFd3Z0UUQ3ekUwNXNkVXNsdi96SjhnUgpqem8rOG1lbVRudjhXMi9RZm1MVm5lczJUS1cza1ZqbjJZUHROUkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURmVENDQW1XZ0F3SUJBZ0lVS0Z0ckhXUjNXOHBqSDdoMlIvUUtIQ3d6aFBNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2V6RUxNQWtHQTFVRUJoTUNSRVV4R3pBWkJnTlZCQWdNRWxOamFHeGxjM2RwWnkxSWIyeHpkR1ZwYmpFTwpNQXdHQTFVRUJ3d0ZWMlZrWld3eEtEQW1CZ05WQkFvTUgxTjBZV05yWVdKc1pTQlRhV2R1YVc1bklFRjFkR2h2CmNtbDBlU0JKYm1NeEZUQVRCZ05WQkFNTURITjBZV05yWVdKc1pTNWtaVEFnRncweU1qQTJNamd4TkRJMU5ESmEKR0E4eU1USXlNRFl3TkRFME1qVTBNbG93WGpFTE1Ba0dBMVVFQmhNQ1JFVXhHekFaQmdOVkJBZ01FbE5qYUd4bApjM2RwWnkxSWIyeHpkR1ZwYmpFT01Bd0dBMVVFQnd3RlYyVmtaV3d4RWpBUUJnTlZCQW9NQ1ZOMFlXTnJZV0pzClpURU9NQXdHQTFVRUF3d0ZiV2x1YVc4d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDN210R0RoQWtiRFJlSVJZNkM1K00xYVJwMmI2bUhWRytlSFU0TWhDWE1kcnlmK0JCdXJzS1VCN1l4TXlWOQpOb2drSEpLS3RxUDlSNUpSdDJGdnMvNFFPcWRlbmZPbTNzdWkyZHA4UE94OU5OdE1PVGdMSFRZc0dhODlCTzZpCmRNVHFiSm1FcFUwK2NER2VmVTVkTkN2S2VGQTBNMVZJT0ZrLzBBS3pOQjZSZWZoa0VSWHE0ZWFMOHh0NG8xSnIKZzBnZm10dzd4S2lITkkwa3ViWllSM0crM1NhQ2pITVRFMEZ2REVxZnFFT0xZSTBwM3FhdHJIZ00vNm5hMXVDegpkVFhScm40SmJ1QkYzUmd5UGM5VDlaK3pMUk9ZVE9OYzE4aEJFQVgwYlBNTWg3aUZOTXgzMVM1K2lScEZpSGhkClVKUmFVVEYrYjJQdVhPd2d1L00zVmdhSkFnTUJBQUdqRkRBU01CQUdBMVVkRVFRSk1BZUNCVzFwYm1sdk1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNjbkprekZYbmZuRUkvK3JRVTVzS3NjL1AzRlVVb1lKbzdoTEpKTWRodwpYTVY1RTRlNHprTEJyL3dVeWVtVkZreUdNY0RCZFJtUGZyS281RERFSWZjQ0xrbkpGOVcwY0kya3BwZHVpTW5GCks1V3pMQnRUUkNlaE5EK2FtdTNPN2VhaGFqSFQwNHFka05ja2wwN1U3TXNXRy95UVpWVXZ4bU9Mc2s2aysxYTIKY3JUdlNTcHN6ZVJVUU1xQkJrUSswOUw3V1Yxcy9wL2ZjVUpVZVA2cDJ4SjF6YmlCTnk2U0tHQmx0MXQrQUdSTApxUkRidVlMK2hsRGsrZ1ZjZGd6U3duOHB3Qnl5OSs0eFM4bmZ0NWRPdHVmQkxUOGJMK2RHcG9PN2VOMVVXZkVsCnpBUFFWYjRDTHUvaXVaWkVuWWtOMlg3aWVsZEU5eDYvNHJiVllxbUgxZHVuCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdTVyUmc0UUpHdzBYaUVXT2d1ZmpOV2thZG0rcGgxUnZuaDFPRElRbHpIYThuL2dRCmJxN0NsQWUyTVRNbGZUYUlKQnlTaXJhai9VZVNVYmRoYjdQK0VEcW5YcDN6cHQ3TG90bmFmRHpzZlRUYlREazQKQ3gwMkxCbXZQUVR1b25URTZteVpoS1ZOUG5BeG5uMU9YVFFyeW5oUU5ETlZTRGhaUDlBQ3N6UWVrWG40WkJFVgo2dUhtaS9NYmVLTlNhNE5JSDVyY084U29oelNOSkxtMldFZHh2dDBtZ294ekV4TkJid3hLbjZoRGkyQ05LZDZtCnJheDREUCtwMnRiZ3MzVTEwYTUrQ1c3Z1JkMFlNajNQVS9XZnN5MFRtRXpqWE5mSVFSQUY5R3p6REllNGhUVE0KZDlVdWZva2FSWWg0WFZDVVdsRXhmbTlqN2x6c0lMdnpOMVlHaVFJREFRQUJBb0lCQUF2RDQ4dkpwZ0NLUzZXQwpKelBTY3c5UWJoWnJYa2hjWlR1WFB1UE9EY2pLMFgxK3d4a040S29ENmNzZ0dBUElQYlYyRFVLaHZac091QUJqCjdicGhvVmRITm1QYXFBTVpDZEJHdFVzQlR4dHpDeVcybU9zcGc5STBNaWN6ZmZ1Mk12czRvRkFQUmM3YW5tSUEKSGIvK201aHcveWFtNlh4RC9HVGlHS2xBWllKZDlpV2MxVThHTWMvZXRoNXpDOHpIQ0p5dzkyVi9lMHVDUzh4SAowRTZyK1IxUU5TaWRBV1Rmc0p1dVVzSnFEcHVjd3NyQlF3dTUxYzB6SjlNeGthTUgzYlBRMnJCMUpBeU5Gd2JlCmxCdzhubjJuVXVXZDYzRUN1TzJDUUFadU14ZnpRVVJCRzV3ZjZiaHh3S2RBNGQ1dFJqd2Y3NXJUbm1pNFdJbW0KeEZlbXAyRUNnWUVBOXJwTTI4UTlzdGJNMEc3YmZHSk9UT284dVVTOHppOUwwNndMckswZ1NFdVNaaXRsTUkyKwpIQmgrS1ZOVGZ6RzVBSENiTDUycFU4V2JOcVMwcmNHaXgvRUthUDRrTXB2WlBGQW5yMGYrYTVJaVk2OUo1WUpDCllic3JGcHVrVTJGTjJXdVpUbG1DRE1NR0J2WlhyNkl5NVZlbFlRRC9oMDVEb0NUYjU5VWVDTVVDZ1lFQXdxZTIKVjQ4d3EydGVlZzRSY2FQZ1R4QmxPMXBDK2V4dFVJdEQvUTVyME14SHUyNVFYbTdYZTVVb2N6all3SUpPRklvcgp6dk5PS2pHb0o1SzY0QkMvVXQxZUNqKy9mMWQ1MjJNcmZheitvZnlObEpIaUthVmhWUkYzOWlmdnhRZ2kvNlQ3CmpENCsxZmdXZ0w5V0ZpSncrNGxUUWsybUdXV0FmWkNKRjVEZk92VUNnWUFlR3p1WHNZbUowaFlwOU8wSmI0RjQKZHppenJzU1BNRXhEWndJQnJ4cDZWK1prV3pVOHlIOEROS1hvYXdlTVJNZjdXc0pFL0NzV1VzMk96R2hUcjRZcQplYW80aDVKcExvVkNpOUZiM1NBWmhqcDJDWVN0NGNneDNzSHlQMG04OXVtbDl6QTgxRVUvUTJqdjNvMXluQXN6CjJ3OE9HQzRXRjZHKzMrQ0ptSUxTdFFLQmdIMGl1ZnNTQjFTNzRuR09wN0lwaXFMcFJGcmlqTm9FSHNZL3NVWjIKUmVObDM5dGpjSEUweW53ZENITUNJWDJvaHk5M0gvQ2J3eTBtM1JZTG91MDJkdmg3Yk9BajJTU3hCSnAvNTA2VQpydUZON1dxTVdoc3h3UitoNmorcHJ0ODRldDlqblg2cjZWTStlS0R0NEJhOHIydFUvZHhLOUxPdzUraFF5WUVICjFpb2RBb0dBT1lyWUJhWEVQS0JFUHNnTURjbG4wdTNTQWN2b3VuSklLTklmTmF0NEdqdnFacWxOQnRvODQ0NVMKRWVzVm4yd0xpVWROQ0c0NzZ1b25LSUpJeWdQTDdhMUV4KzJQK0pkMno3MnFmUFlGUkhUa1MrTFEzRXJCVEVvSQpockZZWlRwVEk4aVl2ZG9Xd0k2RUtBdmhnVGdzT05YeEtzdmJUYUlxRURTOWJwWFVPK2c9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: opa.stackable.tech/v1alpha1
kind: OpaCluster
metadata:
  name: simple-opa
spec:
  version: 0.37.2-stackable0.2.0
  servers:
    roleGroups:
      default:
        selector:
          matchLabels:
            kubernetes.io/os: linux
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: simple-trino-s3-secret-class
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: simple-trino-s3-secret
  labels:
    secrets.stackable.tech/class: simple-trino-s3-secret-class
stringData:
  accessKey: trino
  secretKey: trinotrino
---
apiVersion: s3.stackable.tech/v1alpha1
kind: S3Connection
metadata:
  name: s3-connection-spec
spec:
  host: minio
  port: 9000
  accessStyle: Path
  credentials:
    secretClass: simple-trino-s3-secret-class
  tls:
    verification:
      server:
        caCert:
          secretClass: minio-tls-certificates
---
apiVersion: hive.stackable.tech/v1alpha1
kind: HiveCluster
metadata:
  name: simple-hive-derby
spec:
  version: 2.3.9-stackable0.4.0
  s3:
    inline:
      host: minio
      port: 9000
      accessStyle: Path
      credentials:
        secretClass: simple-trino-s3-secret-class
      tls:
        verification:
          server:
            caCert:
              secretClass: minio-tls-certificates
  metastore:
    roleGroups:
      default:
        selector:
          matchLabels:
            kubernetes.io/os: linux
        replicas: 1
        config:
          database:
            connString: jdbc:derby:;databaseName=/tmp/metastore_db;create=true
            user: APP
            password: mine
            dbType: derby
---
apiVersion: v1
kind: Secret
metadata:
  name: simple-trino-users-secret
type: kubernetes.io/opaque
stringData:
  # admin:admin
  admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i
  # alice:alice
  alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W
  # bob:bob
  bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-trino-opa-bundle
  labels:
    opa.stackable.tech/bundle: "trino"
data:
  trino.rego: |
    package trino

    import future.keywords.in

    default allow = false

    allow {
      is_admin
    }

    allow {
      is_bob
      can_be_accessed_by_bob
    }

    is_admin() {
      input.context.identity.user == "admin"
    }

    is_bob() {
      input.context.identity.user == "bob"
    }

    can_be_accessed_by_bob() {
      input.action.operation in ["ImpersonateUser", "FilterCatalogs", "AccessCatalog", "ExecuteQuery"]
    }
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: simple-trino-client-tls
spec:
  backend:
    autoTls:
      ca:
        secret:
          name: secret-provisioner-simple-trino-client-tls-ca
          namespace: default
        autoGenerate: true
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: simple-trino
spec:
  version: 387-stackable0.1.0
  hiveConfigMapName: simple-hive-derby
  opa:
    configMapName: simple-opa
    package: trino
  config:
    tls:
      secretClass: simple-trino-client-tls
    internalTls:
      secretClass: tls
  authentication:
    method:
      multiUser:
        userCredentialsSecret:
          namespace: default
          name: simple-trino-users-secret
  s3:
    inline:
      host: minio
      port: 9000
      accessStyle: Path
      credentials:
        secretClass: simple-trino-s3-secret-class
      tls:
        verification:
          server:
            caCert:
              secretClass: minio-tls-certificates
  coordinators:
    roleGroups:
      default:
        selector:
          matchLabels:
            kubernetes.io/os: linux
        replicas: 1
        config: {}
  workers:
    roleGroups:
      default:
        selector:
          matchLabels:
            kubernetes.io/os: linux
        replicas: 1
        config: {}
