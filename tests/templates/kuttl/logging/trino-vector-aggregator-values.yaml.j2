---
role: Aggregator
service:
  ports:
  - name: api
    port: 8686
    protocol: TCP
    targetPort: 8686
  - name: vector
    port: 6123
    protocol: TCP
    targetPort: 6000
customConfig:
  api:
    address: 0.0.0.0:8686
    enabled: true
  sources:
    vector:
      address: 0.0.0.0:6000
      type: vector
      version: "2"
  transforms:
    filteredAutomaticLogConfigCoordinatorTrino:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-automatic-log-config-0" &&
        .container == "trino"
    filteredAutomaticLogConfigCoordinatorPwFileUpdater:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-automatic-log-config-0" &&
        .container == "password-file-updater"
    filteredAutomaticLogConfigCoordinatorVector:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-automatic-log-config-0" &&
        .container == "vector"
    filteredAutomaticLogConfigCoordinatorPrepare:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-automatic-log-config-0" &&
        .container == "prepare"
    filteredAutomaticLogConfigWorkerTrino:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-automatic-log-config-0" &&
        .container == "trino"
    filteredAutomaticLogConfigWorkerVector:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-automatic-log-config-0" &&
        .container == "vector"
    filteredAutomaticLogConfigWorkerPrepare:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-automatic-log-config-0" &&
        .container == "prepare"
    customLogConfigCoordinatorTrino:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-custom-log-config-0" &&
        .container == "trino"
    customLogConfigCoordinatorPwFileUpdater:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-custom-log-config-0" &&
        .container == "password-file-updater"
    customLogConfigCoordinatorVector:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-custom-log-config-0" &&
        .container == "vector"
    customLogConfigCoordinatorPrepare:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-coordinator-custom-log-config-0" &&
        .container == "prepare"
    customLogConfigWorkerTrino:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-custom-log-config-0" &&
        .container == "trino"
    customLogConfigWorkerVector:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-custom-log-config-0" &&
        .container == "vector"
    customLogConfigWorkerPrepare:
      type: filter
      inputs: [vector]
      condition: >-
        .pod == "test-trino-worker-custom-log-config-0" &&
        .container == "prepare"
    filteredInvalidEvents:
      type: filter
      inputs: [vector]
      condition: |-
        .timestamp == from_unix_timestamp!(0) ||
        is_null(.level) ||
        is_null(.logger) ||
        is_null(.message)
  sinks:
    out:
      inputs: [filtered*, custom*]
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
      type: vector
      address: {{ lookup('env', 'VECTOR_AGGREGATOR') }}
      buffer:
        # Avoid back pressure from VECTOR_AGGREGATOR. The test should
        # not fail if the aggregator is not available.
        when_full: drop_newest
{% else %}
      type: blackhole
{% endif %}
