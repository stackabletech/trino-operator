---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: trino
spec:
  image:
    productVersion: "{{ test_scenario['values']['trino'].split('-stackable')[0] }}"
    stackableVersion: "{{ test_scenario['values']['trino'].split('-stackable')[1] }}"
  clusterConfig:
    catalogLabelSelector:
      matchLabels:
        trino: trino
    authentication:
      method:
        multiUser:
          userCredentialsSecret:
            name: trino-users
    authorization:
      opa:
        configMapName: opa
        package: trino
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
  coordinators:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
        config: {}
  workers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
        config: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: trino-users
type: kubernetes.io/opaque
stringData:
  # admin:admin
  admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i
  # alice:alice
  alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W
  # bob:bob
  bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2.
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: hive
  labels:
    trino: trino
spec:
  connector:
    hive:
      metastore:
        configMap: hive
      s3:
        reference: minio
      hdfs:
        configMap: hdfs
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: iceberg
  labels:
    trino: trino
spec:
  connector:
    iceberg:
      metastore:
        configMap: hive # It's fine to reuse the existing HMS for tests. Not recommended for production though, there a dedicated HMS should be used.
      s3:
        reference: minio
      hdfs:
        configMap: hdfs
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: tpch
  labels:
    trino: trino
spec:
  connector:
    tpch: {}
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: postgresgeneric
  labels:
    trino: trino
spec:
  connector:
    # Even when we start supporting PostgreSQL natively, please leave this in to test the generic connector
    generic:
      connectorName: postgresql
      properties:
        connection-url:
          value: jdbc:postgresql://postgresql:5432/hive
        connection-user:
          valueFromSecret:
            name: my-postgresql-credentials-secret
            key: user
        connection-password:
          valueFromSecret:
            name: my-postgresql-credentials-secret
            key: password
---
apiVersion: v1
kind: Secret
metadata:
  name: my-postgresql-credentials-secret
stringData:
  user: hive
  password: hive
