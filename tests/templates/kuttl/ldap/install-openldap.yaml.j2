---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: openldap-tls
spec:
  backend:
    autoTls:
      ca:
        autoGenerate: true
        secret:
          name: openldap-tls-ca
          namespace: $NAMESPACE
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: openldap
  namespace: $NAMESPACE
  labels:
    app.kubernetes.io/name: openldap
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: openldap
  serviceName: openldap
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openldap
    spec:
      serviceAccountName: "ldap-sa"
      containers:
        - name: openldap
          image: docker.io/bitnami/openldap:2.5
          env:
            - name: LDAP_ADMIN_USERNAME
              value: admin
            - name: LDAP_ADMIN_PASSWORD
              value: admin
            - name: LDAP_ENABLE_TLS
              value: \"yes\"
            - name: LDAP_TLS_CERT_FILE
              value: /tls/tls.crt
            - name: LDAP_TLS_KEY_FILE
              value: /tls/tls.key
            - name: LDAP_TLS_CA_FILE
              value: /tls/ca.crt
          ports:
            - name: ldap
              containerPort: 1389
            - name: tls-ldap
              containerPort: 1636
          volumeMounts:
            - name: tls
              mountPath: /tls
          startupProbe:
            tcpSocket:
              port: 1389
          readinessProbe:
            tcpSocket:
              port: 1389
      volumes:
        - name: tls
          csi:
            driver: secrets.stackable.tech
            volumeAttributes:
              secrets.stackable.tech/class: openldap-tls
              secrets.stackable.tech/scope: pod
---
apiVersion: v1
kind: Service
metadata:
  name: openldap
  namespace: $NAMESPACE
  labels:
    app.kubernetes.io/name: openldap
spec:
  type: ClusterIP
  ports:
    - name: ldap
      port: 1389
      targetPort: ldap
    - name: tls-ldap
      port: 1636
      targetPort: tls-ldap
  selector:
    app.kubernetes.io/name: openldap

{% if test_scenario['values']['openshift'] == 'true' %}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: openldap-clusterrole
rules:
  - apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    resourceNames:
      - stackable-openldap-scc
    verbs:
      - use
---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: stackable-openldap-scc
  annotations:
    kubernetes.io/description: custom SCC for tests with OpenLDAP
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: true
allowedCapabilities: null
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups: []
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities:
  - MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - ephemeral
  - hostPath
  - nfs
  - persistentVolumeClaim
  - projected
  - secret
  - csi
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: use-integration-tests-scc
  namespace: $NAMESPACE
rules:
- apiGroups: ["security.openshift.io"]
  resources: ["securitycontextconstraints"]
  resourceNames: ["privileged"]
  verbs: ["use"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ldap-sa
  namespace: $NAMESPACE
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: use-integration-tests-scc
  namespace: $NAMESPACE
subjects:
  - kind: ServiceAccount
    name: ldap-sa
roleRef:
  kind: Role
  name: use-integration-tests-scc
  apiGroup: rbac.authorization.k8s.io
{% endif %}
